name: mpv
defaults:
  run:
    shell: bash

on:
  workflow_dispatch:
    inputs:
      command:
        description: 'Run custom command before building'
        required: false
        type: string
      github_release:
        description: 'Upload to Github release'
        required: false
        default: true
        type: boolean

  push:
    branches: [ "main" ]

jobs:
  build_mpv:
    name: Building mpv
    runs-on: ubuntu-latest
    strategy:
      matrix:
        bit: [32, 64, 64-v3]
    env:
      BIT: ${{ matrix.bit }}
    container:
      image: docker://ghcr.io/shinchiro/archlinux:latest

    steps:
      - name: Get current date and random hash
        run: |
          echo "short_date=$(date "+%Y%m%d")" >> $GITHUB_ENV
          echo "random_hash=$(echo $RANDOM | md5sum | head -c 20)" >> $GITHUB_ENV
          if [[ $BIT == 32 ]]; then
            echo "arch=i686" >> $GITHUB_ENV
          elif [[ $BIT == 64 ]]; then
            echo "arch=x86_64" >> $GITHUB_ENV
          elif [[ $BIT == 64-v3 ]]; then
            echo "arch=x86_64" >> $GITHUB_ENV
            echo "gcc_arch=-DGCC_ARCH=x86-64-v3" >> $GITHUB_ENV
            echo "x86_64_level=-v3" >> $GITHUB_ENV
          fi

      - name: Setup git config
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global pull.rebase true
          git config --global rebase.autoStash true
          git config --global fetch.prune true
          git config --global --add safe.directory $PWD

      - uses: actions/checkout@main
        with:
          ref: main

      - name: Loading build cache
        uses: actions/cache@main
        id: build_cache
        with:
          path: build${{ matrix.bit }}
          key: ${{ runner.os }}-build-${{ secrets.CACHE_VERSION }}-build${{ matrix.bit }}-${{ env.short_date }}-${{ env.random_hash }}
          restore-keys: |
            ${{ runner.os }}-build-${{ secrets.CACHE_VERSION }}-build${{ matrix.bit }}-${{ env.short_date }}
            ${{ runner.os }}-build-${{ secrets.CACHE_VERSION }}-build${{ matrix.bit }}

      - name: Loading packages cache
        uses: actions/cache@main
        id: packages_cache
        with:
          path: src_packages
          key: ${{ runner.os }}-build-${{ secrets.CACHE_VERSION }}-src_packages_${{ matrix.bit }}-${{ env.short_date }}-${{ env.random_hash }}
          restore-keys: |
            ${{ runner.os }}-build-${{ secrets.CACHE_VERSION }}-src_packages_32-${{ env.short_date }}
            ${{ runner.os }}-build-${{ secrets.CACHE_VERSION }}-src_packages_32

      - name: Loading release cache
        uses: actions/cache@main
        id: release_cache
        with:
          path: release${{ matrix.bit }}
          key: ${{ runner.os }}-build-${{ secrets.CACHE_VERSION }}-release${{ matrix.bit }}-${{ github.run_id }}

      - name: Running custom command
        if: ${{ github.event.inputs.command != '' }}
        continue-on-error: true
        run: ${{ github.event.inputs.command }}

      - name: Downloading source
        run: |
          cmake --version
          cmake -DTARGET_ARCH=${{ env.arch }}-w64-mingw32 ${{ env.gcc_arch }} -DALWAYS_REMOVE_BUILDFILES=ON -DSINGLE_SOURCE_LOCATION=$PWD/src_packages -G Ninja -Bbuild$BIT -H.
          ninja -C build$BIT download || true

      - name: Building toolchain
        id: build_toolchain
        continue-on-error: true
        run: |
          if [[ ! "$(ls -A build$BIT/install/bin/${{ env.arch }}-w64-mingw32-gcc)" ]]; then ninja -C build$BIT gcc; fi

      - name: Building mpv
        id: build_mpv
        if: ${{ steps.build_toolchain.outcome == 'success' }}
        continue-on-error: true
        run: |
          ninja -C build$BIT update; ninja -C build$BIT mpv

      - name: Packaging mpv
        id: packaging_mpv
        if: ${{ steps.build_toolchain.outcome == 'success' && steps.build_mpv.outcome == 'success' }}
        continue-on-error: true
        run: |
          mkdir -p release$BIT
          rm -rf build$BIT/mpv-debug*; ninja -C build$BIT mpv-packaging; mv build$BIT/mpv*.7z release$BIT

      - name: Copying ffmpeg
        id: copying_ffmpeg
        if: ${{ steps.build_toolchain.outcome == 'success' && steps.packaging_mpv.outcome == 'success' }}
        continue-on-error: true
        run: |
          hash=$(git -C src_packages/ffmpeg rev-parse --short HEAD)
          7z a -m0=lzma2 -mx=9 -ms=on release$BIT/ffmpeg-${{ env.arch }}${{ env.x86_64_level }}-git-$hash.7z ./build$BIT/install/mingw/bin/ffmpeg.exe

      - name: Print dir info
        id: print_dir_info
        continue-on-error: true
        run: |
          ls -alh build$BIT/install build$BIT/install/*/ build$BIT/install/lib/*/ build$BIT/install/mingw/lib build$BIT/install/mingw/lib/*/

      - name: Collecting logs
        id: collect_logs
        run: |
          mkdir -p build${BIT}_logs
          cp -fr $(find build$BIT -type f -iname "*-*.log" -or -wholename "*/ffbuild/config.log") build${BIT}_logs || true
          7z a -m0=lzma2 -mx=9 -ms=on logs.7z build*logs

      - name: Uploading logs
        id: upload_logs
        continue-on-error: true
        uses: actions/upload-artifact@master
        with:
          name: logs_${{ matrix.bit }}
          path: logs.7z
          retention-days: 1

      - name: Uploading artifact
        id: upload_artifact
        continue-on-error: true
        uses: actions/upload-artifact@master
        with:
          name: release_${{ matrix.bit }}
          path: release${{ matrix.bit }}/*.7z
          retention-days: 1

      - name: Cleaning build directory
        id: delete_build_dir
        run: |
          rm -rf build$BIT/mpv*
          if [[ $BIT == 64 || $BIT == 64-v3 ]]; then rm -rf src_packages/*; fi
          du -sh build$BIT src_packages /var/cache/pacman/pkg || true
