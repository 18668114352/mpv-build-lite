From fe77f746ed62f21dfe12068ca5b73920b87a6afd Mon Sep 17 00:00:00 2001
From: Martin Herkt <lachs0r@srsfckn.biz>
Date: Thu, 27 Aug 2015 22:42:55 +0200
Subject: [PATCH] Revert "Fix the broken cache more."

This reverts commit ad9f5880502c9a3f8e7f8919336888ee056f17ba.
---
 configure.ac            |  3 --
 fc-cache/fc-cache.c     | 75 ++++++++++++++++++++++++-------------
 fontconfig/fontconfig.h |  2 +-
 src/fcarch.c            |  2 +-
 src/fccache.c           | 98 +------------------------------------------------
 src/fcdir.c             |  6 ---
 src/fcint.h             |  8 ----
 7 files changed, 52 insertions(+), 142 deletions(-)

diff --git a/configure.ac b/configure.ac
index 5c10dd0..4cfc984 100644
--- a/configure.ac
+++ b/configure.ac
@@ -168,9 +168,6 @@ AC_CHECK_SYMBOL([posix_fadvise], [fcntl.h], [fc_func_posix_fadvise=1], [fc_func_
 AC_DEFINE_UNQUOTED([HAVE_POSIX_FADVISE], [$fc_func_posix_fadvise], [Define to 1 if you have the 'posix_fadvise' function.])
 
 #
-AC_CHECK_MEMBERS([struct stat.st_mtim],,, [#include <sys/stat.h>])
-
-#
 if test "x$ac_cv_func_fstatvfs" = "xyes"; then
 	AC_CHECK_MEMBERS([struct statvfs.f_basetype, struct statvfs.f_fstypename],,,
 		[#include <sys/statvfs.h>])
diff --git a/fc-cache/fc-cache.c b/fc-cache/fc-cache.c
index 0336073..18cd6c5 100644
--- a/fc-cache/fc-cache.c
+++ b/fc-cache/fc-cache.c
@@ -122,7 +122,7 @@ usage (char *program, int error)
 static FcStrSet *processed_dirs;
 
 static int
-scanDirs (FcStrList *list, FcConfig *config, FcBool force, FcBool really_force, FcBool verbose, FcBool error_on_no_fonts, int *changed)
+scanDirs (FcStrList *list, FcConfig *config, FcBool force, FcBool really_force, FcBool verbose, FcBool recursive, FcBool error_on_no_fonts, int *changed, FcStrSet *updateDirs)
 {
     int		    ret = 0;
     const FcChar8   *dir;
@@ -142,13 +142,15 @@ scanDirs (FcStrList *list, FcConfig *config, FcBool force, FcBool really_force,
     {
 	if (verbose)
 	{
+	    if (!recursive)
+		printf ("Re-scanning ");
 	    if (sysroot)
 		printf ("[%s]", sysroot);
 	    printf ("%s: ", dir);
 	    fflush (stdout);
 	}
 	
-	if (FcStrSetMember (processed_dirs, dir))
+	if (recursive && FcStrSetMember (processed_dirs, dir))
 	{
 	    if (verbose)
 		printf ("skipping, looped directory detected\n");
@@ -192,8 +194,13 @@ scanDirs (FcStrList *list, FcConfig *config, FcBool force, FcBool really_force,
 	
 	if (!cache)
 	{
-	    (*changed)++;
-	    cache = FcDirCacheRead (dir, FcTrue, config);
+	    if (!recursive)
+		cache = FcDirCacheRescan (dir, config);
+	    else
+	    {
+		(*changed)++;
+		cache = FcDirCacheRead (dir, FcTrue, config);
+	    }
 	    if (!cache)
 	    {
 		fprintf (stderr, "%s: error scanning\n", dir);
@@ -222,30 +229,37 @@ scanDirs (FcStrList *list, FcConfig *config, FcBool force, FcBool really_force,
 	    }
 	}
 
-	subdirs = FcStrSetCreate ();
-	if (!subdirs)
+	if (recursive)
 	{
-	    fprintf (stderr, "%s: Can't create subdir set\n", dir);
-	    ret++;
+	    subdirs = FcStrSetCreate ();
+	    if (!subdirs)
+	    {
+		fprintf (stderr, "%s: Can't create subdir set\n", dir);
+		ret++;
+		FcDirCacheUnload (cache);
+		continue;
+	    }
+	    for (i = 0; i < FcCacheNumSubdir (cache); i++)
+		FcStrSetAdd (subdirs, FcCacheSubdir (cache, i));
+	    if (updateDirs && FcCacheNumSubdir (cache) > 0)
+		FcStrSetAdd (updateDirs, dir);
+	
 	    FcDirCacheUnload (cache);
-	    continue;
-	}
-	for (i = 0; i < FcCacheNumSubdir (cache); i++)
-	    FcStrSetAdd (subdirs, FcCacheSubdir (cache, i));
 	
-	FcDirCacheUnload (cache);
-
-	sublist = FcStrListCreate (subdirs);
-	FcStrSetDestroy (subdirs);
-	if (!sublist)
-	{
-	    fprintf (stderr, "%s: Can't create subdir list\n", dir);
-	    ret++;
-	    continue;
+	    sublist = FcStrListCreate (subdirs);
+	    FcStrSetDestroy (subdirs);
+	    if (!sublist)
+	    {
+		fprintf (stderr, "%s: Can't create subdir list\n", dir);
+		ret++;
+		continue;
+	    }
+	    FcStrSetAdd (processed_dirs, dir);
+	    ret += scanDirs (sublist, config, force, really_force, verbose, recursive, error_on_no_fonts, changed, updateDirs);
+	    FcStrListDone (sublist);
 	}
-	FcStrSetAdd (processed_dirs, dir);
-	ret += scanDirs (sublist, config, force, really_force, verbose, error_on_no_fonts, changed);
-	FcStrListDone (sublist);
+	else
+	    FcDirCacheUnload (cache);
     }
     if (error_on_no_fonts && !was_processed)
 	ret++;
@@ -276,7 +290,7 @@ cleanCacheDirectories (FcConfig *config, FcBool verbose)
 int
 main (int argc, char **argv)
 {
-    FcStrSet	*dirs;
+    FcStrSet	*dirs, *updateDirs;
     FcStrList	*list;
     FcBool    	verbose = FcFalse;
     FcBool	force = FcFalse;
@@ -379,9 +393,18 @@ main (int argc, char **argv)
 	return 1;
     }
 
+    updateDirs = FcStrSetCreate ();
     changed = 0;
-    ret = scanDirs (list, config, force, really_force, verbose, error_on_no_fonts, &changed);
+    ret = scanDirs (list, config, force, really_force, verbose, FcTrue, error_on_no_fonts, &changed, updateDirs);
+    /* Update the directory cache again to avoid the race condition as much as possible */
     FcStrListDone (list);
+    list = FcStrListCreate (updateDirs);
+    if (list)
+    {
+	ret += scanDirs (list, config, FcTrue, FcFalse, verbose, FcFalse, error_on_no_fonts, &changed, NULL);
+	FcStrListDone (list);
+    }
+    FcStrSetDestroy (updateDirs);
 
     /*
      * Try to create CACHEDIR.TAG anyway.
diff --git a/fontconfig/fontconfig.h b/fontconfig/fontconfig.h
index 57c1b68..a570b2f 100644
--- a/fontconfig/fontconfig.h
+++ b/fontconfig/fontconfig.h
@@ -66,7 +66,7 @@ typedef int		FcBool;
  * it means multiple copies of the font information.
  */
 
-#define FC_CACHE_VERSION_NUMBER	7
+#define FC_CACHE_VERSION_NUMBER	6
 #define _FC_STRINGIFY_(s)    	#s
 #define _FC_STRINGIFY(s)    	_FC_STRINGIFY_(s)
 #define FC_CACHE_VERSION    	_FC_STRINGIFY(FC_CACHE_VERSION_NUMBER)
diff --git a/src/fcarch.c b/src/fcarch.c
index da33a83..4a921c0 100644
--- a/src/fcarch.c
+++ b/src/fcarch.c
@@ -48,7 +48,7 @@ FC_ASSERT_STATIC (0x08 + 1*FC_MAX(SIZEOF_VOID_P,ALIGNOF_DOUBLE) == sizeof (FcVal
 FC_ASSERT_STATIC (0x00 + 2*SIZEOF_VOID_P == sizeof (FcPatternElt));
 FC_ASSERT_STATIC (0x08 + 2*SIZEOF_VOID_P == sizeof (FcPattern));
 FC_ASSERT_STATIC (0x08 + 2*SIZEOF_VOID_P == sizeof (FcCharSet));
-FC_ASSERT_STATIC (0x08 + 7*SIZEOF_VOID_P == sizeof (FcCache));
+FC_ASSERT_STATIC (0x08 + 6*SIZEOF_VOID_P == sizeof (FcCache));
 
 
 int
diff --git a/src/fccache.c b/src/fccache.c
index 20c4418..fc3ed41 100644
--- a/src/fccache.c
+++ b/src/fccache.c
@@ -253,7 +253,6 @@ struct _FcCacheSkip {
     dev_t	    cache_dev;
     ino_t	    cache_ino;
     time_t	    cache_mtime;
-    long	    cache_mtime_nano;
     FcCacheSkip	    *next[1];
 };
 
@@ -381,18 +380,12 @@ FcCacheInsert (FcCache *cache, struct stat *cache_stat)
 	s->cache_dev = cache_stat->st_dev;
 	s->cache_ino = cache_stat->st_ino;
 	s->cache_mtime = cache_stat->st_mtime;
-#ifdef HAVE_STRUCT_STAT_ST_MTIM
-	s->cache_mtime_nano = cache_stat->st_mtim.tv_nsec;
-#else
-	s->cache_mtime_nano = 0;
-#endif
     }
     else
     {
 	s->cache_dev = 0;
 	s->cache_ino = 0;
 	s->cache_mtime = 0;
-	s->cache_mtime_nano = 0;
     }
 
     /*
@@ -480,10 +473,6 @@ FcCacheFindByStat (struct stat *cache_stat)
 	    s->cache_ino == cache_stat->st_ino &&
 	    s->cache_mtime == cache_stat->st_mtime)
 	{
-#ifdef HAVE_STRUCT_STAT_ST_MTIM
-	    if (s->cache_mtime != cache_stat->st_mtim.tv_nsec)
-		continue;
-#endif
 	    FcRefInc (&s->ref);
 	    unlock_cache ();
 	    return s->cache;
@@ -551,7 +540,6 @@ static FcBool
 FcCacheTimeValid (FcConfig *config, FcCache *cache, struct stat *dir_stat)
 {
     struct stat	dir_static;
-    FcBool fnano = FcTrue;
 
     if (!dir_stat)
     {
@@ -570,18 +558,10 @@ FcCacheTimeValid (FcConfig *config, FcCache *cache, struct stat *dir_stat)
 	FcStrFree (d);
 	dir_stat = &dir_static;
     }
-#ifdef HAVE_STRUCT_STAT_ST_MTIM
-    fnano = (cache->checksum_nano == dir_stat->st_mtim.tv_nsec);
-    if (FcDebug () & FC_DBG_CACHE)
-	printf ("FcCacheTimeValid dir \"%s\" cache checksum %d.%ld dir checksum %d.%ld\n",
-		FcCacheDir (cache), cache->checksum, cache->checksum_nano, (int) dir_stat->st_mtime, dir_stat->st_mtim.tv_nsec);
-#else
     if (FcDebug () & FC_DBG_CACHE)
 	printf ("FcCacheTimeValid dir \"%s\" cache checksum %d dir checksum %d\n",
 		FcCacheDir (cache), cache->checksum, (int) dir_stat->st_mtime);
-#endif
-
-    return cache->checksum == (int) dir_stat->st_mtime && fnano;
+    return cache->checksum == (int) dir_stat->st_mtime;
 }
 
 static FcBool
@@ -777,10 +757,6 @@ FcDirCacheValidateHelper (FcConfig *config, int fd, struct stat *fd_stat, struct
 	ret = FcFalse;
     else if (c.checksum != (int) dir_stat->st_mtime)
 	ret = FcFalse;
-#ifdef HAVE_STRUCT_STAT_ST_MTIM
-    else if (c.checksum_nano != dir_stat->st_mtim.tv_nsec)
-	ret = FcFalse;
-#endif
     return ret;
 }
 
@@ -855,9 +831,6 @@ FcDirCacheBuild (FcFontSet *set, const FcChar8 *dir, struct stat *dir_stat, FcSt
     cache->version = FC_CACHE_VERSION_NUMBER;
     cache->size = serialize->size;
     cache->checksum = (int) dir_stat->st_mtime;
-#ifdef HAVE_STRUCT_STAT_ST_MTIM
-    cache->checksum_nano = dir_stat->st_mtim.tv_nsec;
-#endif
 
     /*
      * Serialize directory name
@@ -1045,11 +1018,6 @@ FcDirCacheWrite (FcCache *cache, FcConfig *config)
 	    skip->cache_dev = cache_stat.st_dev;
 	    skip->cache_ino = cache_stat.st_ino;
 	    skip->cache_mtime = cache_stat.st_mtime;
-#ifdef HAVE_STRUCT_STAT_ST_MTIM
-	    skip->cache_mtime_nano = cache_stat.st_mtim.tv_nsec;
-#else
-	    skip->cache_mtime_nano = 0;
-#endif
 	}
 	unlock_cache ();
     }
@@ -1174,70 +1142,6 @@ FcDirCacheClean (const FcChar8 *cache_dir, FcBool verbose)
     return ret;
 }
 
-int
-FcDirCacheLock (const FcChar8 *dir,
-		FcConfig      *config)
-{
-    FcChar8 *cache_hashed = NULL;
-    FcChar8 cache_base[CACHEBASE_LEN];
-    FcStrList *list;
-    FcChar8 *cache_dir;
-    const FcChar8 *sysroot = FcConfigGetSysRoot (config);
-    int fd = -1;
-
-    FcDirCacheBasename (dir, cache_base);
-    list = FcStrListCreate (config->cacheDirs);
-    if (!list)
-	return -1;
-
-    while ((cache_dir = FcStrListNext (list)))
-    {
-	if (sysroot)
-	    cache_hashed = FcStrBuildFilename (sysroot, cache_dir, cache_base, NULL);
-	else
-	    cache_hashed = FcStrBuildFilename (cache_dir, cache_base, NULL);
-	if (!cache_hashed)
-	    break;
-	fd = FcOpen ((const char *)cache_hashed, O_RDWR);
-	/* No caches in that directory. simply retry with another one */
-	if (fd != -1)
-	{
-	    struct flock fl;
-
-	    fl.l_type = F_WRLCK;
-	    fl.l_whence = SEEK_SET;
-	    fl.l_start = 0;
-	    fl.l_len = 0;
-	    fl.l_pid = getpid ();
-	    if (fcntl (fd, F_SETLKW, &fl) == -1)
-		goto bail;
-	    break;
-	}
-    }
-    return fd;
-bail:
-    if (fd != -1)
-	close (fd);
-    return -1;
-}
-
-void
-FcDirCacheUnlock (int fd)
-{
-    struct flock fl;
-
-    if (fd != -1)
-    {
-	fl.l_type = F_UNLCK;
-	fl.l_whence = SEEK_SET;
-	fl.l_start = 0;
-	fl.l_len = 0;
-	fl.l_pid = getpid ();
-	fcntl (fd, F_SETLK, &fl);
-	close (fd);
-    }
-}
-
 /*
  * Hokey little macro trick to permit the definitions of C functions
  * with the same name as CPP macros
diff --git a/src/fcdir.c b/src/fcdir.c
index 4b19c32..e3cfa6e 100644
--- a/src/fcdir.c
+++ b/src/fcdir.c
@@ -344,7 +344,6 @@ FcDirCacheScan (const FcChar8 *dir, FcConfig *config)
     struct stat		dir_stat;
     const FcChar8	*sysroot = FcConfigGetSysRoot (config);
     FcChar8		*d;
-    int			fd = -1;
 
     if (sysroot)
 	d = FcStrBuildFilename (sysroot, dir, NULL);
@@ -365,7 +364,6 @@ FcDirCacheScan (const FcChar8 *dir, FcConfig *config)
     if (!dirs)
 	goto bail1;
 
-    fd = FcDirCacheLock (dir, config);
     /*
      * Scan the dir
      */
@@ -385,7 +383,6 @@ FcDirCacheScan (const FcChar8 *dir, FcConfig *config)
     FcDirCacheWrite (cache, config);
 
  bail2:
-    FcDirCacheUnlock (fd);
     FcStrSetDestroy (dirs);
  bail1:
     FcFontSetDestroy (set);
@@ -404,7 +401,6 @@ FcDirCacheRescan (const FcChar8 *dir, FcConfig *config)
     FcStrSet *dirs;
     const FcChar8 *sysroot = FcConfigGetSysRoot (config);
     FcChar8 *d = NULL;
-    int fd = -1;
 
     cache = FcDirCacheLoad (dir, config, NULL);
     if (!cache)
@@ -420,7 +416,6 @@ FcDirCacheRescan (const FcChar8 *dir, FcConfig *config)
     if (!dirs)
 	goto bail;
 
-    fd = FcDirCacheLock (dir, config);
     /*
      * Scan the dir
      */
@@ -439,7 +434,6 @@ FcDirCacheRescan (const FcChar8 *dir, FcConfig *config)
     FcDirCacheWrite (new, config);
 
 bail1:
-    FcDirCacheUnlock (fd);
     FcStrSetDestroy (dirs);
 bail:
     if (d)
diff --git a/src/fcint.h b/src/fcint.h
index 68f9817..15e22fd 100644
--- a/src/fcint.h
+++ b/src/fcint.h
@@ -369,7 +369,6 @@ struct _FcCache {
     int		dirs_count;	    /* number of subdir strings */
     intptr_t	set;		    /* offset to font set */
     int		checksum;	    /* checksum of directory state */
-    long	checksum_nano;	    /* checksum of directory state */
 };
 
 #undef FcCacheDir
@@ -591,13 +590,6 @@ FcCacheFini (void);
 FcPrivate void
 FcDirCacheReference (FcCache *cache, int nref);
 
-FcPrivate int
-FcDirCacheLock (const FcChar8 *dir,
-		FcConfig      *config);
-
-FcPrivate void
-FcDirCacheUnlock (int fd);
-
 /* fccfg.c */
 
 FcPrivate FcBool
-- 
2.4.5

