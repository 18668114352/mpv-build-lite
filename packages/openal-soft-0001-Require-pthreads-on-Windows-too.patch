From 9a7bab675cb8d8609f507d323d7744e70bba6826 Mon Sep 17 00:00:00 2001
From: Martin Herkt <lachs0r@srsfckn.biz>
Date: Sat, 16 Nov 2013 15:52:29 +0100
Subject: [PATCH] Require pthreads on Windows too

---
 Alc/compat.h   | 17 ++---------------
 Alc/helpers.c  | 45 +++++----------------------------------------
 CMakeLists.txt | 53 ++++++++++++++++++++++++++---------------------------
 3 files changed, 33 insertions(+), 82 deletions(-)

diff --git a/Alc/compat.h b/Alc/compat.h
index af9f8e8..fa29714 100644
--- a/Alc/compat.h
+++ b/Alc/compat.h
@@ -3,32 +3,19 @@
 
 #include "AL/al.h"
 
+#include <pthread.h>
+
 #ifdef _WIN32
 
 #define WIN32_LEAN_AND_MEAN
 #include <windows.h>
 
-typedef DWORD pthread_key_t;
-int pthread_key_create(pthread_key_t *key, void (*callback)(void*));
-int pthread_key_delete(pthread_key_t key);
-void *pthread_getspecific(pthread_key_t key);
-int pthread_setspecific(pthread_key_t key, void *val);
-
 WCHAR *strdupW(const WCHAR *str);
 
-typedef LONG pthread_once_t;
-#define PTHREAD_ONCE_INIT 0
-void pthread_once(pthread_once_t *once, void (*callback)(void));
-
-static inline int sched_yield(void)
-{ SwitchToThread(); return 0; }
-
 #define HAVE_DYNLOAD 1
 
 #else
 
-#include <pthread.h>
-
 typedef pthread_mutex_t CRITICAL_SECTION;
 void InitializeCriticalSection(CRITICAL_SECTION *cs);
 void DeleteCriticalSection(CRITICAL_SECTION *cs);
diff --git a/Alc/helpers.c b/Alc/helpers.c
index 6c6c88e..d2fc83b 100644
--- a/Alc/helpers.c
+++ b/Alc/helpers.c
@@ -290,43 +290,12 @@ void RestoreFPUMode(const FPUCtl *ctl)
 }
 
 
-#ifdef _WIN32
-void pthread_once(pthread_once_t *once, void (*callback)(void))
-{
-    LONG ret;
-    while((ret=InterlockedExchange(once, 1)) == 1)
-        sched_yield();
-    if(ret == 0)
-        callback();
-    InterlockedExchange(once, 2);
-}
-
-
-int pthread_key_create(pthread_key_t *key, void (*callback)(void*))
-{
-    *key = TlsAlloc();
-    if(callback)
-        InsertUIntMapEntry(&TlsDestructor, *key, callback);
-    return 0;
-}
-
-int pthread_key_delete(pthread_key_t key)
-{
-    InsertUIntMapEntry(&TlsDestructor, key, NULL);
-    TlsFree(key);
-    return 0;
-}
-
-void *pthread_getspecific(pthread_key_t key)
-{ return TlsGetValue(key); }
-
-int pthread_setspecific(pthread_key_t key, void *val)
-{
-    TlsSetValue(key, val);
-    return 0;
-}
-
+#include <pthread.h>
+#ifdef HAVE_PTHREAD_NP_H
+#include <pthread_np.h>
+#endif
 
+#ifdef _WIN32
 void *LoadLib(const char *name)
 { return LoadLibraryA(name); }
 void CloseLib(void *handle)
@@ -359,10 +328,6 @@ WCHAR *strdupW(const WCHAR *str)
 
 #else
 
-#include <pthread.h>
-#ifdef HAVE_PTHREAD_NP_H
-#include <pthread_np.h>
-#endif
 #include <sched.h>
 #include <time.h>
 #include <sys/time.h>
diff --git a/CMakeLists.txt b/CMakeLists.txt
index abd81fd..605b0ef 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -384,6 +384,32 @@ IF(ALSOFT_DLOPEN)
     ENDIF()
 ENDIF()
 
+CHECK_INCLUDE_FILE(pthread.h HAVE_PTHREAD_H)
+IF(NOT HAVE_PTHREAD_H)
+    MESSAGE(FATAL_ERROR "PThreads is required for non-Windows builds!")
+ENDIF()
+# Some systems need pthread_np.h to get recursive mutexes
+CHECK_INCLUDE_FILES("pthread.h;pthread_np.h" HAVE_PTHREAD_NP_H)
+
+CHECK_C_COMPILER_FLAG(-pthread HAVE_PTHREAD)
+IF(HAVE_PTHREAD)
+    ADD_DEFINITIONS(-pthread)
+    SET(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -pthread")
+    SET(EXTRA_LIBS ${EXTRA_LIBS} -pthread)
+ENDIF()
+
+CHECK_LIBRARY_EXISTS(pthread pthread_create "" HAVE_LIBPTHREAD)
+IF(HAVE_LIBPTHREAD)
+    SET(EXTRA_LIBS pthread ${EXTRA_LIBS})
+ENDIF()
+
+CHECK_SYMBOL_EXISTS(pthread_setschedparam pthread.h HAVE_PTHREAD_SETSCHEDPARAM)
+
+CHECK_SYMBOL_EXISTS(pthread_setname_np pthread.h HAVE_PTHREAD_SETNAME_NP)
+IF(NOT HAVE_PTHREAD_SETNAME_NP)
+    CHECK_SYMBOL_EXISTS(pthread_set_name_np pthread.h HAVE_PTHREAD_SET_NAME_NP)
+ENDIF()
+
 # Check if we have Windows headers
 CHECK_INCLUDE_FILE(windows.h HAVE_WINDOWS_H -D_WIN32_WINNT=0x0501)
 IF(NOT HAVE_WINDOWS_H)
@@ -401,33 +427,6 @@ IF(NOT HAVE_WINDOWS_H)
         MESSAGE(FATAL_ERROR "No sleep function found!")
     ENDIF()
 
-    # We need pthreads outside of Windows
-    CHECK_INCLUDE_FILE(pthread.h HAVE_PTHREAD_H)
-    IF(NOT HAVE_PTHREAD_H)
-        MESSAGE(FATAL_ERROR "PThreads is required for non-Windows builds!")
-    ENDIF()
-    # Some systems need pthread_np.h to get recursive mutexes
-    CHECK_INCLUDE_FILES("pthread.h;pthread_np.h" HAVE_PTHREAD_NP_H)
-
-    CHECK_C_COMPILER_FLAG(-pthread HAVE_PTHREAD)
-    IF(HAVE_PTHREAD)
-        ADD_DEFINITIONS(-pthread)
-        SET(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -pthread")
-        SET(EXTRA_LIBS ${EXTRA_LIBS} -pthread)
-    ENDIF()
-
-    CHECK_LIBRARY_EXISTS(pthread pthread_create "" HAVE_LIBPTHREAD)
-    IF(HAVE_LIBPTHREAD)
-        SET(EXTRA_LIBS pthread ${EXTRA_LIBS})
-    ENDIF()
-
-    CHECK_SYMBOL_EXISTS(pthread_setschedparam pthread.h HAVE_PTHREAD_SETSCHEDPARAM)
-
-    CHECK_SYMBOL_EXISTS(pthread_setname_np pthread.h HAVE_PTHREAD_SETNAME_NP)
-    IF(NOT HAVE_PTHREAD_SETNAME_NP)
-        CHECK_SYMBOL_EXISTS(pthread_set_name_np pthread.h HAVE_PTHREAD_SET_NAME_NP)
-    ENDIF()
-
     CHECK_LIBRARY_EXISTS(rt clock_gettime "" HAVE_LIBRT)
     IF(HAVE_LIBRT)
         SET(EXTRA_LIBS rt ${EXTRA_LIBS})
-- 
1.8.0.1

