From 2bba0e4374c38925aa40fa0db7ac32e9032c0356 Mon Sep 17 00:00:00 2001
From: Martin Herkt <lachs0r@srsfckn.biz>
Date: Sat, 14 Jun 2014 17:11:47 +0200
Subject: [PATCH] =?UTF-8?q?Changes=20for=20lachs0r=E2=80=99s=20Windows=20b?=
 =?UTF-8?q?uilds?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 src/fcdir.c  | 30 +++++++++++++++++++++---------
 src/fcinit.c | 35 +++++++++++++++++++++++++++++++++++
 src/fcxml.c  |  2 --
 3 files changed, 56 insertions(+), 11 deletions(-)

diff --git a/src/fcdir.c b/src/fcdir.c
index 49259c1..cf044fa 100644
--- a/src/fcdir.c
+++ b/src/fcdir.c
@@ -77,14 +77,7 @@ FcFileScanFontConfig (FcFontSet		*set,
 	/*
 	 * Nothing in the cache, scan the file
 	 */
-	if (FcDebug () & FC_DBG_SCAN)
-	{
-	    printf ("\tScanning file %s...", file);
-	    fflush (stdout);
-	}
 	font = FcFreeTypeQuery (file, id, blanks, &count);
-	if (FcDebug () & FC_DBG_SCAN)
-	    printf ("done\n");
 
 	/*
 	 * Edit pattern with user-defined rules
@@ -196,8 +189,8 @@ FcDirScanConfig (FcFontSet	*set,
     base = file + strlen ((char *) file);
 
     if (FcDebug () & FC_DBG_SCAN)
-	printf ("\tScanning dir %s\n", dir);
-	
+	fprintf (stderr, "[fontconfig] Scanning dir %s\n", dir);
+
     d = opendir ((char *) dir);
     if (!d)
     {
@@ -233,8 +226,24 @@ FcDirScanConfig (FcFontSet	*set,
     /*
      * Scan file files to build font patterns
      */
+    char buf1[512], buf2[512], pad[512], *str = &buf1[0], *prev = &buf2[0], *tmp;
+    int j, diff;
+    prev[0] = pad[0] = 0;
+
     for (i = 0; i < files->num; i++)
     {
+	snprintf (str, 512, "\r[%d/%d] %s", i+1, files->num, files->strs[i]);
+
+	for (diff = strlen (prev) - strlen (str), j = 0; diff > 0; diff--, j++)
+	    pad[j] = ' ';
+
+	pad[j] = 0;
+
+	if (FcDebug () & FC_DBG_SCAN)
+	    fprintf (stderr, "%s%s", str, pad);
+
+	tmp = str; str = prev; prev = tmp;
+
 	if (scanOnly)
 	{
 	    if (FcFileIsDir (files->strs[i]))
@@ -246,6 +255,9 @@ FcDirScanConfig (FcFontSet	*set,
 	}
     }
 
+    if (FcDebug () & FC_DBG_SCAN)
+	fprintf (stderr, "\n[fontconfig] Finished scanning dir %s\n", dir);
+
 bail2:
     FcStrSetDestroy (files);
 bail1:
diff --git a/src/fcinit.c b/src/fcinit.c
index b8d5d06..1a25b97 100644
--- a/src/fcinit.c
+++ b/src/fcinit.c
@@ -35,6 +35,12 @@
 #pragma message("To suppress these warnings, define FC_NO_MT.")
 #endif
 
+#ifdef _WIN32
+#define _WIN32_IE 0x0500
+#include <shlobj.h>
+#include <malloc.h>
+#endif
+
 static FcConfig *
 FcInitFallbackConfig (void)
 {
@@ -43,12 +49,41 @@ FcInitFallbackConfig (void)
     config = FcConfigCreate ();
     if (!config)
 	goto bail0;
+
+#ifdef _WIN32
+    char *buf = malloc (MAX_PATH+1);
+    if (!buf) goto bail1;
+    if (SHGetFolderPathA (NULL, CSIDL_FONTS|CSIDL_FLAG_CREATE, NULL,
+	SHGFP_TYPE_CURRENT, buf) == S_OK) {
+	if (!FcConfigAddDir (config, (FcChar8 *) buf))
+	    goto bail2;
+    }
+
+    char *buf2 = malloc (MAX_PATH+1);
+    if (!buf) goto bail2;
+    if (SHGetFolderPathA (NULL, CSIDL_LOCAL_APPDATA|CSIDL_FLAG_CREATE, NULL,
+	SHGFP_TYPE_CURRENT, buf2) == S_OK) {
+	if (buf2[strlen(buf2)-1] != '\\')
+	    strcat (buf2, "\\");
+	strcat (buf2, "fontconfig");
+	if (!FcConfigAddCacheDir (config, (FcChar8 *) buf2))
+	    goto bail3;
+    }
+#else
     if (!FcConfigAddDir (config, (FcChar8 *) FC_DEFAULT_FONTS))
 	goto bail1;
     if (!FcConfigAddCacheDir (config, (FcChar8 *) FC_CACHEDIR))
 	goto bail1;
+#endif
     return config;
 
+#ifdef _WIN32
+bail3:
+    free(buf2);
+bail2:
+    free(buf);
+#endif
+
 bail1:
     FcConfigDestroy (config);
 bail0:
diff --git a/src/fcxml.c b/src/fcxml.c
index c68b0cf..c0d978b 100644
--- a/src/fcxml.c
+++ b/src/fcxml.c
@@ -3261,8 +3261,6 @@ bail0:
     {
 	if (name)
 	    FcConfigMessage (0, FcSevereError, "Cannot load config file \"%s\"", name);
-	else
-	    FcConfigMessage (0, FcSevereError, "Cannot load default config file");
 	return FcFalse;
     }
     return FcTrue;
-- 
1.9.3

